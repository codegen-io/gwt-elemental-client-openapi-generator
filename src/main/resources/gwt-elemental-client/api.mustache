package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import java.util.function.Consumer;

import elemental2.core.JsArray;
import elemental2.core.JsMap;
import elemental2.core.JsSet;

import elemental2.promise.IThenable;
import elemental2.promise.Promise;

/**
 * Path("{{commonPath}}"){{#lambda.escapeAsterisk}}{{#hasConsumes}}
 * Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }){{/hasConsumes}}{{#hasProduces}}
 * Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }){{/hasProduces}}{{/lambda.escapeAsterisk}}
 */
{{>generatedAnnotation}}
public interface {{classname}} {
{{#operations}}
{{#operation}}
{{>apiInterface}}
{{/operation}}
{{/operations}}

  /**
   * Create a {@link elemental2.promise.IThenable.ThenOnFulfilledCallbackFn} which consumes the
   * value and returns <code>null</code>.
   *
   * @param consumer the value consumer
   * @return a callback function which return null
   * @param <T> the value type
   * @param <V> the return type
   */
  static <T, V> IThenable.ThenOnFulfilledCallbackFn<T, V> consume(Consumer<T> consumer) {
    return value -> {
      consumer.accept(value);
      return null;
    };
  }

  /**
   * Create a {@link elemental2.promise.IThenable.ThenOnFulfilledCallbackFn} which handles the
   * rejected object and returns null.
   *
   * @param consumer the value consumer
   * @return a callback function which returns null
   * @param <V> the return type
   */
  static <V> IThenable.ThenOnRejectedCallbackFn<V> handle(Consumer<Object> consumer) {
    return value -> {
      consumer.accept(value);
      return null;
    };
  }
}